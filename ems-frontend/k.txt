package com.recmain.recordmaintenance.filter;

import com.recmain.recordmaintenance.service.UserService;
import com.recmain.recordmaintenance.util.JwtUtil;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.annotation.Order;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

@Component
@Order(1)
public class JwtAuthFilter extends OncePerRequestFilter {

  @Autowired
  private JwtUtil jwtUtil;

  @Autowired
  private UserService userService;

  @Override
  protected void doFilterInternal(
    HttpServletRequest request,
    HttpServletResponse response,
    FilterChain filterChain
  ) throws ServletException, IOException {
    // TODO Auto-generated method stub

    List<String> public_url = Arrays.asList(
      "/login",
      "/register",
      "/reset-password",
      "/forgot-password"
    );

    String uri = request.getRequestURI();
    System.out.println(uri);
    final String authorizationHeader = request.getHeader("Authorization");
    String email = null;

    if (!public_url.contains(uri)) {
      System.out.println("uri");
      if (
        (authorizationHeader != null) &&
        authorizationHeader.startsWith("Bearer")
        ) {
        System.out.println("header");
        String token = authorizationHeader.substring(7);
        if (jwtUtil.validateToken(token)) {
          System.out.println("token");
          email = jwtUtil.getEmailFromToken(token);
          if (
            (email != null) &&
            userService.userExistsByEmail(email) &&
            SecurityContextHolder.getContext().getAuthentication() == null
            ) {
            System.out.println("email");
            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(
              email,
              null, null
            );

            authenticationToken.setDetails(
              new WebAuthenticationDetailsSource().buildDetails(request)
            );
            SecurityContextHolder
              .getContext()
              .setAuthentication(authenticationToken);
          }
        }
      }
    }

    filterChain.doFilter(request, response);
  }
}
11:59 AM
package com.recmain.recordmaintenance.config;

import static org.springframework.security.config.Customizer.withDefaults;

import com.recmain.recordmaintenance.filter.JwtAuthFilter;
// import com.recmain.recordmaintenance.authprovider.BasicAuthProvider;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

  //   @Autowired
  //   private BasicAuthProvider basicAuthProvider;

  // @Autowired
  // private JwtAuthProvider jwtAuthProvider;
  // @Bean
  // public JwtAuthenticationConverter jwtAuthenticationConverter() {
  //   JwtAuthenticationConverter converter = new JwtAuthenticationConverter();
  //   return converter;
  // }

  @Autowired
  private JwtAuthFilter jwtAuthFilter;

  @Bean
  public SecurityFilterChain securityFilterChain(HttpSecurity http)
    throws Exception {
    http
      .cors(withDefaults())
      .csrf(csrf -> csrf.disable())
      .authorizeHttpRequests(requests ->
        requests
          .requestMatchers(
            "/login",
            "/register",
            "/reset-password",
            "forgot-password"
          )
          .permitAll()
          .anyRequest()
          .authenticated()
      )
      .addFilterBefore(
        jwtAuthFilter,
        UsernamePasswordAuthenticationFilter.class
      )
      .httpBasic(withDefaults());
    //   .authenticationProvider(basicAuthProvider)
    // .authenticationProvider(jwtAuthProvider)
    // .oauth2ResourceServer(j ->
    //   j.jwt(e -> e.jwtAuthenticationConverter(jwtAuthenticationConverter()))
    // );

    return http.build();
  }
}